<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>About Me</title>
</head>
<body>
    <h1>About Me</h1>
    <p><strong>Name:</strong> Marcos Astudillo Carrasco</p>
    <p><strong>Student Number:</strong> 041057439</p>
    <p><strong>Email:</strong> astu0002@algonquinlive.com</p>
    <hr />

    <h2>Introduction</h2>
    <p>Hello I'm Marcos Astudillo, a student passionate about technology, programming, and music. I moved from Chile to Canada with my family two years ago and am currently pursuing my studies here.</p>

    <h2>Expectations from this Course</h2>
    <p>In this course, I expect to deepen my understanding of web development using ASP.NET MVC Core. I look forward to learning about creating robust web applications, understanding the MVC architecture better, and gaining hands-on experience deploying applications to Azure.</p>

    <h2>Questions and Answers</h2>
    <h4>Is C# a strongly or loosely typed language? Why?</h4>
    <p>C# is a strongly typed language because each variable and object must be declared with a type, and types are checked at compile-time to prevent type errors.</p>
    <br />
    <h4>Is C# declarative or imperative? Why?</h4>
    <p>C# is primarily an imperative language because it focuses on describing how to achieve a result through statements that change the program's state. However, it also supports declarative programming features like LINQ.</p>
    <br />
    <h4>Explain implicit types in C#. Why do we use them? Give an example.</h4>
    <p>Implicit types in C# are declared using the `var` keyword, allowing the compiler to infer the type based on the assigned value. We use them for cleaner code and when the type is obvious from the context. Example: `var number = 5;`.</p>
    <br />
    <h4>What is the difference between a Value Type and a Reference Type?</h4>
    <p>Value types store the actual data, whereas reference types store a reference to the data's memory address. Value types are stored on the stack, and reference types are stored on the heap.</p>
    <br />
    <h4>What is a 'Property' in C# as it relates to classes and objects?</h4>
    <p>A property in C# is a member of a class that provides a flexible mechanism to read, write, or compute the value of a private field. Properties are accessed like fields but are implemented with methods (get and set).</p>
    <br />
    <h4>Describe the MVC design pattern. Explain its components.</h4>
    <p>The MVC design pattern separates an application into three main components: Model, View, and Controller. The Model represents the data and business logic, the View displays the data, and the Controller handles the user input and updates the Model and View accordingly.</p>
    <br />
    <h4>Describe the purpose of the Program.cs class in this project.</h4>
    <p>The `Program.cs` class is the entry point of the ASP.NET Core application. It sets up the host, configures services, and starts the application.</p>
    <br />
    <h4>MVC Core applications can 'host' themselves: true or false.</h4>
    <p>True. MVC Core applications can host themselves using Kestrel, a cross-platform web server for ASP.NET Core.</p>
    <br />
    <h4>Explain what happens in memory when we make a value type nullable.</h4>
    <p>When we make a value type nullable, an additional field is added to indicate whether the value is null or has a defined value. This adds a small overhead in memory to accommodate the nullability feature.</p>
    <br />
    <h4>Explain anonymous types and why we use them. Give an example.</h4>
    <p>Anonymous types allow us to create new types without explicitly defining them. They are useful for creating objects on the fly, especially in LINQ queries. Example: `var person = new { Name = "John", Age = 30 };`.</p>
    <br />
    <h4>Explain Git branches and why we use them.</h4>
    <p>Git branches allow us to diverge from the main codebase and work on features or bug fixes independently. They enable parallel development and help in managing different versions of the codebase.</p>
    <br />
    <h4>Explain dependency injection and why we use it.</h4>
    <p>Dependency injection is a design pattern used to implement IoC (Inversion of Control), allowing a class to receive its dependencies from an external source rather than creating them itself. This promotes loose coupling, easier testing, and better maintainability.</p>
</body>
</html>
